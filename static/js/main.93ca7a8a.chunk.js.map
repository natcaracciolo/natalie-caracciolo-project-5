{"version":3,"sources":["Aztro.js","Titles.js","Results.js","Alert.js","App.js","serviceWorker.js","index.js"],"names":["Aztro","react_default","a","createElement","action","htmlFor","type","id","onChange","this","props","value","userInput","onClick","Component","Titles","showAlert","Results","className","date","compatibility","luckynumber","color","mood","description","Alert","lib_default","show","title","text","onConfirm","closeAlert","React","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","setState","target","handleAlertChange","e","state","handleClick","preventDefault","error","axios","url","method","dataType","params","sign","concat","then","response","console","log","data","date_range","lucky_number","showResults","catch","src_Alert","particles_default","particles","number","density","enable","value_area","line_linked","opacity","move","direction","speed","size","anim","opacity_min","interactivity","events","onclick","mode","modes","push","particles_nb","retina_detect","src_Titles","src_Aztro","src_Results","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8PAyBeA,mLAlBP,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAMC,OAAO,UAETH,EAAAC,EAAAC,cAAA,SAAOE,QAAQ,WAAf,oBAGAJ,EAAAC,EAAAC,cAAA,SAAOG,KAAK,OAAOC,GAAG,UAAUC,SAAUC,KAAKC,MAAMF,SAAUG,MAAOF,KAAKC,MAAME,YAGjFX,EAAAC,EAAAC,cAAA,UAAQU,QAASJ,KAAKC,MAAMG,SAA5B,iCAbAC,uDCiBLC,mLAfP,OAEId,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,gFACAF,EAAAC,EAAAC,cAAA,qDAA4CF,EAAAC,EAAAC,cAAA,UAAQI,GAAG,QAAQM,QAASJ,KAAKC,MAAMM,WAAvC,eAA5C,yBAPKF,aCeNG,EAjBC,SAACP,GACb,OACIT,EAAAC,EAAAC,cAAA,OAAKe,UAAU,QACXjB,EAAAC,EAAAC,cAAA,wBAAgBO,EAAMS,MACtBlB,EAAAC,EAAAC,cAAA,2BAAmBO,EAAMU,eACzBnB,EAAAC,EAAAC,cAAA,0BAAkBO,EAAMW,aACxBpB,EAAAC,EAAAC,cAAA,yBAAiBO,EAAMY,OACvBrB,EAAAC,EAAAC,cAAA,0BAAkBO,EAAMa,MACxBtB,EAAAC,EAAAC,cAAA,2BAAmBO,EAAMc,gCC0BtBC,mLA5BP,OAGQxB,EAAAC,EAAAC,cAACuB,EAAAxB,EAAD,CACIyB,KAAMlB,KAAKC,MAAMM,UACjBY,MAAM,aACNC,KAAK,0YAcLlB,MAAM,OACNmB,UAAWrB,KAAKC,MAAMqB,oBAvBtBC,IAAMlB,WCiLXmB,cA5Kb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAA1B,KAAAwB,IACZC,EAAAC,OAAAE,EAAA,EAAAF,CAAA1B,KAAA0B,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAA9B,QAeF+B,aAAe,SAACC,GACdP,EAAKQ,SAAS,CACZ9B,UAAW6B,EAAME,OAAOhC,SAlBduB,EAuBdU,kBAAoB,SAACC,GACnBX,EAAKQ,SAAU,CACb1B,WAAakB,EAAKY,MAAM9B,aAzBdkB,EA6Bda,YAAc,SAACN,GACbA,EAAMO,iBACNd,EAAKQ,SAAS,CACZO,OAAM,IAKRC,IAAM,CACJC,IAFO,oCAGPC,OAAQ,OACRC,SAAU,OACVC,OAAQ,CACNC,KAAI,GAAAC,OAAKtB,EAAKY,MAAMlC,cAMrB6C,KAAK,SAAAC,GACNC,QAAQC,IAAIF,GAGZxB,EAAKQ,SAAS,CACZvB,KAAMuC,EAASG,KAAKC,WACpB1C,cAAesC,EAASG,KAAKzC,cAC7BC,YAAaqC,EAASG,KAAKE,aAC3BzC,MAAOoC,EAASG,KAAKvC,MACrBC,KAAMmC,EAASG,KAAKtC,KACpBC,YAAakC,EAASG,KAAKrC,YAC3BZ,UAAW,GAGXoD,aAAa,MAEdC,MAAM,SAAChB,GAERf,EAAKQ,SAAS,CACZO,OAAM,OAjEVf,EAAKY,MAAQ,CACX3B,KAAM,GACNC,cAAe,GACfC,YAAa,GACbC,MAAO,GACPC,KAAM,GACNC,YAAa,GACbZ,UAAW,GACXoD,aAAa,EACbf,OAAO,EACPjC,WAAW,GAZDkB,wEA2EZ,OACEjC,EAAAC,EAAAC,cAAA,OAAKe,UAAU,MAAMX,GAAG,aAExBN,EAAAC,EAAAC,cAAC+D,EAAD,CACElD,UAAWP,KAAKqC,MAAM9B,UACtBe,WAAYtB,KAAKmC,oBAGnB3C,EAAAC,EAAAC,cAACgE,EAAAjE,EAAD,CACIoD,OAAQ,CACNc,UAAa,CACXC,OAAU,CACR1D,MAAS,GACT2D,QAAW,CACTC,QAAU,EACVC,WAAc,MAIlBC,YAAe,CACbF,QAAU,EACVG,QAAW,KAEbC,KAAQ,CACNC,UAAa,SACbC,MAAS,IAEXC,KAAQ,CACNnE,MAAS,KAEX+D,QAAW,CACTK,KAAQ,CACNR,QAAU,EACVM,MAAS,IACTG,YAAe,OAIrBC,cAAiB,CACfC,OAAU,CACRC,QAAW,CACTZ,QAAU,EACVa,KAAQ,SAGZC,MAAS,CACPC,KAAQ,CACNC,aAAgB,OAItBC,eAAiB,KAOpBvF,EAAAC,EAAAC,cAACsF,EAAD,CACGzE,UAAWP,KAAKmC,oBAIlB3C,EAAAC,EAAAC,cAACuF,EAAD,CACElF,SAAUC,KAAK+B,aACf3B,QAASJ,KAAKsC,YACdnC,UAAWH,KAAKqC,MAAMlC,YAItBH,KAAKqC,MAAMG,MAAQhD,EAAAC,EAAAC,cAAA,0GAAsG,IAKhG,IAA3BM,KAAKqC,MAAMkB,aAAwB/D,EAAAC,EAAAC,cAACwF,EAAD,CACjCxE,KAAMV,KAAKqC,MAAM3B,KACjBC,cAAeX,KAAKqC,MAAM1B,cAC1BC,YAAaZ,KAAKqC,MAAMzB,YACxBC,MAAOb,KAAKqC,MAAMxB,MAClBC,KAAMd,KAAKqC,MAAMvB,KACjBC,YAAaf,KAAKqC,MAAMtB,sBA7JlBV,aCEE8E,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjG,EAAAC,EAAAC,cAACgG,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/C,KAAK,SAAAgD,GACjCA,EAAaC","file":"static/js/main.93ca7a8a.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\n\n// state is place that we can use to store our data that the api gives us \nclass Aztro extends Component {\n\n    render() {\n        return (\n            <div>\n                <form action=\"submit\">\n\n                    <label htmlFor=\"newSign\">enter your sign:</label>\n\n                    { /* Attatch handle change method*/}\n                    <input type=\"text\" id=\"newSign\" onChange={this.props.onChange} value={this.props.userInput} />\n\n                    { /* Attatch handleClick method*/}\n                    <button onClick={this.props.onClick}>give me a horoscope!</button>\n\n                </form>\n            </div>\n        );   \n    }\n}\n\nexport default Aztro;","import React, {Component} from 'react';\nimport Alert from 'sweetalert-react';\n\n\nclass Titles extends Component {\n    render() {\n        return(\n\n            <div>\n                <h1>Daily Horoscope</h1>\n                <p>enter your astrological sign below to get some advice on your day! </p>\n                <p> not sure what your sign is? no problem. <button id='alert' onClick={this.props.showAlert}>click here </button>to find out. </p>\n            </div>\n\n            \n\n        );\n    }\n}\n\n\nexport default Titles;\n","import React from 'react';\n\nconst Results = (props) => {\n    return (\n        <div className='body'>\n            <p>date range: {props.date}</p>\n            <p>compatibility: {props.compatibility}</p>\n            <p>lucky number: {props.luckynumber}</p>\n            <p>lucky color: {props.color}</p>\n            <p>current mood: {props.mood}</p>\n            <p>a lil' advice: {props.description}</p>\n        </div>\n    )\n\n\n}\n\n\n\nexport default Results","import React from 'react';\nimport SweetAlert from 'sweetalert-react';\n\n\n\n\nclass Alert extends React.Component {\n    render() {\n        return (\n            \n                \n                <SweetAlert\n                    show={this.props.showAlert}\n                    title=\"Sign Guide\"\n                    text=\"Aries (March 21 - April 19)\nTaurus(April 20 - May20)\nGemini (May 21 - June 20)\nCancer (June 21 - July 22)\nLeo (July 23 - August 22)\nVirgo (August 23 - September 22)\nLibra (September 23 - October 22)\nScorpio (October 23 - November 21)\nSagittarius (November 22 - December 21)\nCapricorn (December 22 - January 19)\nAquarius (January 20 - February 18)\nPisces (February 19 - March 20)\n\"\n\n                    value=\"none\"\n                    onConfirm={this.props.closeAlert}\n                />\n            \n        );\n    }\n}\n\nexport default Alert;","import React, {Component} from 'react';\nimport Aztro from './Aztro.js';\nimport './App.css';\nimport axios from 'axios';\nimport Titles from './Titles.js';\nimport Results from './Results.js';\nimport Particles from 'react-particles-js';\nimport Alert from './Alert';\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      date: '',\n      compatibility: '',\n      luckynumber: '',\n      color: '',\n      mood: '',\n      description: '',\n      userInput: '',\n      showResults: false,\n      error: false,\n      showAlert: false\n    }\n  }\n  // this method puts information in the state when the user types in their sign \n  handleChange = (event) => {\n    this.setState({\n      userInput: event.target.value\n    })\n  }\n\n\n  handleAlertChange = (e) => {\n    this.setState ({\n      showAlert: !(this.state.showAlert)\n    })\n  }\n  //this method pulls information out of the state when the button is clicked \n  handleClick = (event) => {\n    event.preventDefault();\n    this.setState({\n      error:false\n    })\n   \n    // axios API call \n    const URL = `https://aztro.sameerkumar.website`;\n    axios({\n      url: URL,\n      method: 'POST',\n      dataType: 'json',\n      params: {\n        sign: `${this.state.userInput}`,\n\n      }\n\n      // the api is called, then semd a response to to console \n\n    }).then(response => {\n      console.log(response)\n\n      // this is the information that is being sent to the state once the user enters their sign \n      this.setState({\n        date: response.data.date_range,\n        compatibility: response.data.compatibility,\n        luckynumber: response.data.lucky_number,\n        color: response.data.color,\n        mood: response.data.mood,\n        description: response.data.description,\n        userInput: '',\n\n        //when info comes back from api, then \n        showResults: true\n      })\n    }).catch((error ) => {\n\n      this.setState({\n        error:true\n      })\n\n      \n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\" id=\"particles\">\n\n      <Alert\n        showAlert={this.state.showAlert}\n        closeAlert={this.handleAlertChange}\n      />\n\n      <Particles \n          params={{\n            \"particles\": {\n              \"number\": {\n                \"value\": 60,\n                \"density\": {\n                  \"enable\": true,\n                  \"value_area\": 600\n                }\n\n              },\n              \"line_linked\": {\n                \"enable\": true,\n                \"opacity\": 0.04\n              },\n              \"move\": {\n                \"direction\": \"rotate\",\n                \"speed\": .5\n              },\n              \"size\": {\n                \"value\": 1.9\n              },\n              \"opacity\": {\n                \"anim\": {\n                  \"enable\": true,\n                  \"speed\": 1.5,\n                  \"opacity_min\": 0.06\n                }\n              }\n            },\n            \"interactivity\": {\n              \"events\": {\n                \"onclick\": {\n                  \"enable\": true,\n                  \"mode\": \"push\"\n                }\n              },\n              \"modes\": {\n                \"push\": {\n                  \"particles_nb\": 1.5\n                }\n              }\n            },\n            \"retina_detect\": true\n          }}\n      \n    \n      \n      /> \n\n         <Titles \n            showAlert={this.handleAlertChange}\n          \n         /> \n\n          <Aztro \n            onChange={this.handleChange}\n            onClick={this.handleClick}\n            userInput={this.state.userInput}\n          /> \n\n          {\n            this.state.error ? <p>uh oh! looks like theres a spelling error. please make sure evrything is spelled correctly :)</p>: ''  \n          }\n\n          {\n            \n          this.state.showResults === true && <Results\n            date={this.state.date}\n            compatibility={this.state.compatibility}\n            luckynumber={this.state.luckynumber}\n            color={this.state.color}\n            mood={this.state.mood}\n            description={this.state.description}\n\n          />\n          }\n\n      \n\n\n        \n      </div>\n    );\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}